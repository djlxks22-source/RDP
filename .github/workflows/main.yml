name: Dev Environment RDP

on:
  workflow_dispatch:

jobs:
  dev-environment:
    runs-on: windows-2022
    timeout-minutes: 3600

    steps:
      - name: Configure Core RDP Settings
        run: |
          # Enable Remote Desktop and disable Network Level Authentication (NLA)
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "UserAuthentication" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "SecurityLayer" -Value 0 -Force

          # Firewall for RDP
          netsh advfirewall firewall add rule name="RDP" dir=in action=allow protocol=TCP localport=3389

          # Restart the Remote Desktop Service to apply changes
          Restart-Service -Name TermService -Force

      - name: Create RDP User with Fixed Password
        run: |
          $username = "RDP"
          $passwordPlain = "Kayckyy2024@Lex2025"
          $securePass = ConvertTo-SecureString $passwordPlain -AsPlainText -Force

          # Create a local user if it doesn't exist, and ensure they are an admin
          if (-not (Get-LocalUser -Name $username -ErrorAction SilentlyContinue)) {
              New-LocalUser -Name $username -Password $securePass -AccountNeverExpires -PasswordNeverExpires
          }
          
          # Add the user to both Administrators and Remote Desktop Users groups
          Add-LocalGroupMember -Group "Administrators" -Member $username
          Add-LocalGroupMember -Group "Remote Desktop Users" -Member $username

          echo "RDP_USER=$username" >> $env:GITHUB_ENV
          echo "RDP_PASSWORD=$passwordPlain" >> $env:GITHUB_ENV

      - name: Install Tailscale
        run: |
          $tsUrl = "https://pkgs.tailscale.com/stable/tailscale-setup-1.82.0-amd64.msi"
          $installerPath = "$env:TEMP\tailscale.msi"
          Invoke-WebRequest -Uri $tsUrl -OutFile $installerPath
          Start-Process msiexec.exe -ArgumentList "/i", "`"$installerPath`"", "/quiet", "/norestart" -Wait
          Remove-Item $installerPath -Force

      - name: Establish Tailscale Connection
        run: |
          & "$env:ProgramFiles\Tailscale\tailscale.exe" up --authkey=${{ secrets.TAILSCALE_AUTH_KEY }} --hostname=gh-runner-$env:GITHUB_RUN_ID
          $tsIP = $null
          $retries = 0
          while (-not $tsIP -and $retries -lt 10) {
              $tsIP = & "$env:ProgramFiles\Tailscale\tailscale.exe" ip -4
              Start-Sleep -Seconds 5
              $retries++
          }
          if (-not $tsIP) { Write-Error "Tailscale IP not assigned"; exit 1 }
          echo "TAILSCALE_IP=$tsIP" >> $env:GITHUB_ENV
      
      - name: Verify RDP Accessibility
        run: |
          Write-Host "Tailscale IP: $env:TAILSCALE_IP"
          $testResult = Test-NetConnection -ComputerName $env:TAILSCALE_IP -Port 3389
          if (-not $testResult.TcpTestSucceeded) { Write-Error "TCP connection failed"; exit 1 }

      - name: Install Essential Tools (using Chocolatey)
        run: |
          choco install googlechrome -y
          choco install 7zip -y
          choco install git -y
          choco install python -y
          
      - name: Install Visual Studio Code
        run: |
          choco install vscode -y
          # Install common VS Code extensions
          & "C:\Program Files\Microsoft VS Code\bin\code" --install-extension ms-python.python
          & "C:\Program Files\Microsoft VS Code\bin\code" --install-extension ms-vscode.powershell
          & "C:\Program Files\Microsoft VS Code\bin\code" --install-extension eamodio.gitlens

      - name: Install Visual C++ Runtimes
        run: |
          $urls = @(
            "https://aka.ms/vs/17/release/vc_redist.x64.exe",
            "https://aka.ms/vs/17/release/vc_redist.x86.exe"
          )
          foreach ($url in $urls) {
              $installer = "$env:TEMP\vc_redist.exe"
              Invoke-WebRequest -Uri $url -OutFile $installer
              Start-Process -FilePath $installer -ArgumentList "/install /quiet /norestart" -Wait
              Remove-Item $installer -Force
          }
      
      - name: Install MuMu Nebula
        run: |
          Write-Host "Downloading MuMu Nebula..."
          $mumuUrl = "https://mumu-player.mstatic.com/external/MumuPlayer-2.6.12-x64-en-US.exe"
          $installerPath = "$env:TEMP\MuMuNebula.exe"
          
          try {
              Invoke-WebRequest -Uri $mumuUrl -OutFile $installerPath -UserAgent "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36"
              Write-Host "Installing MuMu Nebula..."
              Start-Process -FilePath $installerPath -ArgumentList "/S" -Wait
              Write-Host "MuMu Nebula installed successfully"
          }
          catch {
              Write-Warning "Failed to download MuMu Nebula from primary source, trying alternative method..."
              # Alternative: Install via store or chocolatey if available
              choco install mumuplayer -y --ignore-checksums
          }
          finally {
              if (Test-Path $installerPath) {
                  Remove-Item $installerPath -Force
              }
          }

      - name: Install Additional Development Tools
        run: |
          # Install Node.js if needed for web development
          choco install nodejs -y
          # Install .NET SDK for C# development
          choco install dotnet-sdk -y
          # Install Java for general development
          choco install openjdk -y

      - name: Configure Development Environment
        run: |
          # Create development folder structure
          New-Item -ItemType Directory -Path "C:\Dev" -Force
          New-Item -ItemType Directory -Path "C:\Dev\Projects" -Force
          New-Item -ItemType Directory -Path "C:\Dev\Scripts" -Force
          
          # Set up basic PowerShell profile for development
          $profileDir = Split-Path $PROFILE -Parent
          if (!(Test-Path $profileDir)) {
              New-Item -ItemType Directory -Path $profileDir -Force
          }
          'Set-Location C:\Dev' | Out-File -FilePath $PROFILE -Append -Encoding UTF8

      - name: Maintain Connection
        run: |
          Write-Host "`n=== RDP ACCESS ==="
          Write-Host "Address: $env:TAILSCALE_IP"
          Write-Host "Username: $env:RDP_USER"
          Write-Host "Password: $env:RDP_PASSWORD"
          Write-Host "==================`n"
          Write-Host "Installed Software:"
          Write-Host "- VS Code with Python, PowerShell, Git extensions"
          Write-Host "- MuMu Nebula Android Emulator"
          Write-Host "- Chrome, Git, Python, Node.js, .NET SDK, Java"
          Write-Host "- 7-Zip, Visual C++ Runtimes"
          Write-Host "==================`n"
          while ($true) { Start-Sleep -Seconds 300 }          Add-LocalGroupMember -Group "Administrators" -Member $username
          Add-LocalGroupMember -Group "Remote Desktop Users" -Member $username

          echo "RDP_USER=$username" >> $env:GITHUB_ENV
          echo "RDP_PASSWORD=$passwordPlain" >> $env:GITHUB_ENV

      - name: Install Tailscale
        run: |
          $tsUrl = "https://pkgs.tailscale.com/stable/tailscale-setup-1.82.0-amd64.msi"
          $installerPath = "$env:TEMP\tailscale.msi"
          Invoke-WebRequest -Uri $tsUrl -OutFile $installerPath
          Start-Process msiexec.exe -ArgumentList "/i", "`"$installerPath`"", "/quiet", "/norestart" -Wait
          Remove-Item $installerPath -Force

      - name: Establish Tailscale Connection
        run: |
          & "$env:ProgramFiles\Tailscale\tailscale.exe" up --authkey=${{ secrets.TAILSCALE_AUTH_KEY }} --hostname=gh-runner-$env:GITHUB_RUN_ID
          $tsIP = $null
          $retries = 0
          while (-not $tsIP -and $retries -lt 10) {
              $tsIP = & "$env:ProgramFiles\Tailscale\tailscale.exe" ip -4
              Start-Sleep -Seconds 5
              $retries++
          }
          if (-not $tsIP) { Write-Error "Tailscale IP not assigned"; exit 1 }
          echo "TAILSCALE_IP=$tsIP" >> $env:GITHUB_ENV
      
      - name: Verify RDP Accessibility
        run: |
          Write-Host "Tailscale IP: $env:TAILSCALE_IP"
          $testResult = Test-NetConnection -ComputerName $env:TAILSCALE_IP -Port 3389
          if (-not $testResult.TcpTestSucceeded) { Write-Error "TCP connection failed"; exit 1 }

      - name: Install Common Gaming Applications (using Chocolatey)
        run: |
          choco install googlechrome -y
          choco install discord -y
          choco install 7zip -y
          
      - name: Install Visual C++ Runtimes
        run: |
          $urls = @(
            "https://aka.ms/vs/17/release/vc_redist.x64.exe",
            "https://aka.ms/vs/17/release/vc_redist.x86.exe"
          )
          foreach ($url in $urls) {
              $installer = "$env:TEMP\vc_redist.exe"
              Invoke-WebRequest -Uri $url -OutFile $installer
              Start-Process -FilePath $installer -ArgumentList "/install /quiet /norestart" -Wait
              Remove-Item $installer -Force
          }
      
      - name: Install DirectX and Vulkan
        run: |
          Write-Host "Vulkan runtime needs to be downloaded manually if necessary."
          Write-Host "DirectX is a core component of Windows 2022 and no extra steps are required."

      - name: Install Gaming Platforms
        run: |
          $steamUrl = "https://cdn.cloudflare.steamstatic.com/client/installer/SteamSetup.exe"
          $epicUrl = "https://launcher-public-service-prod06.ol.epicgames.com/launcher/api/installer/download/EpicGamesLauncherInstaller.msi"
          
          # Install Steam
          Write-Host "Installing Steam..."
          Invoke-WebRequest -Uri $steamUrl -OutFile "$env:TEMP\SteamSetup.exe"
          Start-Process -FilePath "$env:TEMP\SteamSetup.exe" -ArgumentList "/S" -Wait
          Remove-Item "$env:TEMP\SteamSetup.exe" -Force
          
          # Install Epic Games Launcher
          Write-Host "Installing Epic Games Launcher..."
          Invoke-WebRequest -Uri $epicUrl -OutFile "$env:TEMP\EpicInstaller.msi"
          Start-Process msiexec.exe -ArgumentList "/i", "`"$env:TEMP\EpicInstaller.msi`"", "/quiet", "/norestart" -Wait
          Remove-Item "$env:TEMP\EpicInstaller.msi" -Force

      - name: Maintain Connection
        run: |
          Write-Host "`n=== RDP ACCESS ==="
          Write-Host "Address: $env:TAILSCALE_IP"
          Write-Host "Username: $env:RDP_USER"
          Write-Host "Password: $env:RDP_PASSWORD"
          Write-Host "==================`n"
          while ($true) { Start-Sleep -Seconds 300 }
